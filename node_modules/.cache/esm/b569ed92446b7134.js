let Joi,bcrypt,User,CustomErrorHandler;_446‍.x([["default",()=>_446‍.o]]);_446‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_446‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_446‍.w("../../Models",[["User",["User"],function(v){User=v}]]);_446‍.w("../../service/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);




const loginController = {
  async login(req, res, next) {
    // Validation
    const loginSchema = Joi.object({
      email: Joi.string().email().required(),
      password: Joi.string()
        .pattern(new RegExp(/.{3,30}/))
        .required(),
    });
    const { error } = loginSchema.validate(req.body);

    if (error) {
      return next(error);
    }

    try {
      const user = await User.findOne({ email: req.body.email });
      if (!user) {
        return next(CustomErrorHandler.wrongCredentials());
      }
      // compare the password
      const match = await bcrypt.compare(req.body.password, user.password);
      if (!match) {
        return next(CustomErrorHandler.wrongCredentials());
      }
      res.json(user);
    } catch (err) {
      return next(err);
    }
  }
};

_446‍.d(loginController);
