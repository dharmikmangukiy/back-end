let CustomErrorHandler,Product,TVProduct;_837‍.x([["default",()=>_837‍.o]]);_837‍.w("../service/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_837‍.w("../Models",[["Product",["Product"],function(v){Product=v}],["TVProduct",["TVProduct"],function(v){TVProduct=v}]]);


const productController = {
  //insert tv/movie
  async store(req, res, next) {
    const {
      backdrop_path,
      genre_ids,
      id,
      original_language,
      original_title,
      overview,
      poster_path,
      release_date,
      vote_average,
      status,
      tagline,
      runtime,
      director,
      genres,
    } = req.body;
    let document;
    try {
      document = await Product.create({
        backdrop_path,
        genre_ids,
        id,
        original_language,
        original_title,
        overview,
        poster_path,
        release_date,
        vote_average,
        status,
        tagline,
        runtime,
        director,
        genres,
      });
    } catch (err) {
      return next(err);
    }
    res.status(201).json(document);
  },

  async TVstore(req, res, next) {
    const { name, price, size, image } = req.body;
    let document;
    try {
      document = await TVProduct.create({
        backdrop_path,
        genre_ids: [16, 28, 12, 10751],
        id,
        original_language,
        original_title,
        overview,
        poster_path,
        release_date,
        vote_average,
        status: "Released",
        tagline: "Unite or fall.",
        runtime,
        director,
        genres: [
          {
            id: 28,
            name: "Action",
          },
          {
            id: 12,
            name: "Adventure",
          },
          {
            id: 878,
            name: "Science Fiction",
          },
        ],
      });
    } catch (err) {
      return next(err);
    }
    res.status(201).json(document);
  },

  //update tv /movie
  async update(req, res, next) {
    const { name, price, size, image } = req.body;
    let document;
    try {
      document = await Product.findOneAndUpdate(
        { id: req.params.id },
        {
          name,
          price,
          size,
          image,
        },
        { new: true }
      );
    } catch (err) {
      return next(err);
    }
    res.status(201).json(document);
  },
  async TVupdate(req, res, next) {
    const { name, price, size, image } = req.body;
    let document;
    try {
      document = await TVProduct.findOneAndUpdate(
        { id: req.params.id },
        {
          name,
          price,
          size,
          image,
        },
        { new: true }
      );
    } catch (err) {
      return next(err);
    }
    res.status(201).json(document);
  },

  //delete tv/movie
  async destroy(req, res, next) {
    const document = await Product.findOneAndRemove({ id: req.params.id });
    if (!document) {
      return next(new Error("Nothing to delete"));
    }
    return res.json(document);
  },
  async TVdestroy(req, res, next) {
    const document = await TVProduct.findOneAndRemove({ id: req.params.id });
    if (!document) {
      return next(new Error("Nothing to delete"));
    }
    return res.json(document);
  },

  //get all movie/tv
  async index(req, res, next) {
    let documents;
    // pagination mongoose-pagination
    try {
      documents = await Product.find()
        .select("-updatedAt -__v -createdAt")
        .sort({ id: 1 });
    } catch (err) {
      return next(CustomErrorHandler.serverError());
    }
    return res.json(documents);
  },
  async indexTV(req, res, next) {
    let documents;
    // pagination mongoose-pagination
    try {
      documents = await TVProduct.find()
        .select("-updatedAt -__v -createdAt")
        .sort({ id: -1 });
    } catch (err) {
      return next(CustomErrorHandler.serverError());
    }
    return res.json(documents);
  },

  //perticular movie/tv
  async show(req, res, next) {
    let document;
    try {
      document = await Product.findOne({ id: +req.params.id }).select(
        "-updatedAt -__v -createdAt"
      );
    } catch (err) {
      return next(CustomErrorHandler.serverError());
    }
    return res.json(document);
  },
  async TVshow(req, res, next) {
    let document;
    try {
      document = await TVProduct.findOne({ id: +req.params.id }).select(
        "-updatedAt -__v -createdAt"
      );
    } catch (err) {
      return next(CustomErrorHandler.serverError());
    }
    return res.json(document);
  },
};

_837‍.d(productController);
